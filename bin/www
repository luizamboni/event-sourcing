#!/usr/bin/env node
"use strict"

/* eslint no-inner-declarations: 0 */
/* eslint no-console: 0 */

const cluster = require("cluster")
const numCPUs = require("os").cpus().length


if (cluster.isMaster && process.env.NODE_ENV === "production") {
  for (let i = 0; i < numCPUs; ++i)
    cluster.fork()

  cluster.on("exit", worker => {
    console.log("PID %s died", worker.process.pid)
  })


} else {
  /**
   * Module dependencies.
   */

  const app = require("../app")
  const http = require("http")

  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.B2WADS_PORT || process.env.PORT || "3000")
  app.set("port", port)

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app)

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    const port = parseInt(val, 10)

    if (isNaN(port)) // named pipe
      return val

    if (port >= 0) // port number
      return port

    return false
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen")
      throw error

    const bind = typeof port === "string"
               ? `Pipe ${port}`
               : `Port ${port}`

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(`${bind} requires elevated privileges`)
        process.exit(1)
        break

      case "EADDRINUSE":
        console.error(`${bind} is already in use`)
        process.exit(1)
        break

      default:
        throw error
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address()
    const bind = typeof addr === "string"
               ? `pipe ${addr}`
               : `port ${addr.port}`
    console.info(`Listening on ${bind}`)
  }

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port)
  server.on("error", onError)
  server.on("listening", onListening)
}
